*ajapopaja.txt* Help for ajapopaja.vim

=============================================================================

CONTENTS                                                  *ajapopaja-contents*

1. Introduction                                               |ajapopaja-intro|
2. Ajapopaja workflow                                      *ajapopaja-workflow*
3. Google API Key                                           *ajapopaja-api-key*
4. User data                                              *ajapopaja-user-data*
5. Commands                                                *ajapopaja-commands*
7. Key mappings when in the prompt window    |ajapopaja-prompt-window-mappings|

=============================================================================

1. Introduction                                               *ajapopaja-intro*

ajapopaja is a Vim plugin that assists users with writing source code and
accomplishing tasks on Unix-like systems. It uses Gemini to generate a
step-by-step guide for completing larger tasks directly within Vim.

The user opens the main interface with `:AjaPopAjaTogglePrompt`, which displays
two windows. The top window is for writing a prompt. Once submitted, the prompt
is sent to the AI, which then creates a multi-step execution plan and guides
the user through the process.

By default, AjaPopAja leverages BASH and Python scripts, but is not restricted
to them. The user can instruct AjaPopAja to use different tools or approaches.
The plugin's core mechanism for creating project resources relies on BASH and
standard Unix command-line tools.

All modifications suggested by AjaPopAja require explicit user action to be
executed. By design, there is no fully automatic mode.

AjaPopAja breaks down a main goal into several discrete steps. For each step,
it provides a Markdown document that explains the step's purpose and provides
the necessary code and commands.

This plugin maintains a user directory at `~/.ajapopaja`. This folder contains
the plugin's configuration, logs for each step (prompt/response pairs saved as
Markdown files), and a Git repository to manage all artifacts created during
a workflow.

2. Ajapopaja workflow                                      *ajapopaja-workflow*

When a workflow begins, AjaPopAja suggests initializing a Git repository in
`~/.ajapopaja/workspaces` to manage the created artifacts.

A good practice is to suggest a directory structure at the beginning of your
prompt. For a web project, you might start with:


www/index.html
www/css/styles.css
www/js/app.js


Suggesting a structure will encourage AjaPopAja to adapt to it.

Asking the AI to build reusable tools (e.g., scripts) is a powerful strategy.
This allows you to persist the achievements of a workflow beyond simple file
creation and helps mitigate context limitations in long-running tasks. It can
also help save on API token usage, as you can generate resources locally with
a script instead of having the AI generate all content directly.

The Markdown document for each step is structured into the following sections:

1. Step Goal
   The first section clearly states the objective of the current step.

2. Executable Script
   A BASH script (or other shell code) designed to create or modify artifacts
   for this step. The user can place the cursor inside this code block and
   execute it using the `:AjaPopAjaExecuteSelectedCode` command.

3. Explanation
   A detailed explanation of how the script works to achieve the step's goal.

4. User Commands
   A list of suggested Vim commands or script invocations. These commands might
   run a tool that AjaPopAja has created or help the user inspect the results.

5. Acceptance Criteria
   This section lists criteria the user can use to verify that the step has
   been completed successfully. The user can then choose to advance to the next
   step or request a refinement of the current one.

6. Next Steps / Iteration
   In the final section, AjaPopAja suggests potential next steps. These might
   be required tasks to complete the workflow, or optional enhancements. Copying
   a suggestion into a new prompt is a great way to advance the project rapidly.

=============================================================================

3. Google API Key                                           *ajapopaja-api-key*

AjaPopAja requires an API key. It looks for it in the environment variable
`$GOOGLE_APY_KEY`. If no key is found, then the agent is not started.

=============================================================================

4. User data                                              *ajapopaja-user-data*

AjaPopAja shares the information sent with the prompt, the artifacts created
within the workflow and a static system instruction that defines the behaviour
and output structure of the agent. No further data is send to the AI without
noticing the user.

=============================================================================

5. Commands                                                *ajapopaja-commands*

                                                      *AjaPopAjaTogglePrompt*
:AjaPopAjaTogglePrompt
                        Toggles the main interface, which consists of a
                        prompt window and a response window.

                                                            *AjaPopAjaPrompt*
:AjaPopAjaPrompt
                        Submits the content of the prompt window to the Gemini
                        AI for processing.

                                                                  *AjaPopAja*
:AjaPopAja "<prompt>"
                        Submits a prompt directly as a command argument,
                        without opening the prompt window.

                                                    *AjaPopAjaSelectPrevious*
:AjaPopAjaSelectPrevious
                        Loads the response from the previous step in the
                        current workflow.

                                                        *AjaPopAjaSelectNext*
:AjaPopAjaSelectNext
                        Loads the response from the next step in the current
                        workflow.

                                                       *AjaPopAjaPopupPrompt*
:AjaPopAjaPopupPrompt
                        Displays the original prompt that generated the
                        current step's response in a popup window.

                                               *AjaPopAjaExecuteSelectedCode*
:AjaPopAjaExecuteSelectedCode
                        Executes the script from the fenced code block under
                        the cursor.

                                        *AjaPopAjaPresentSelectedUserActions*
:AjaPopAjaPresentSelectedUserActions
                        Presents the suggested "User Commands" from the
                        current step in a selectable list for easy execution.

                                            *AjaPopAjaAppendSelectionToPrompt*
:AjaPopAjaAppendSelectionToPrompt
                        Appends the selected text to the prompt buffer. The
                        text is wrapped in a fenced Markdown code section
                        tagged with the `filtetype`.

=============================================================================

6. Key mappings when in the prompt window    *ajapopaja-prompt-window-mappings*

When the cursor is in the prompt window (filetype=ajapopaja), these key
mappings are available in normal mode for quick access to common actions.

  ?                     Submits the prompt.
  C                     Clears the entire prompt window.
  <S-Left>              Selects the previous step.
  <S-Right>             Selects the next step.
  <S-F9>                Shows the prompt for the current step.

=============================================================================

7. Global key mappings                              *ajapopaja-global-mappings*

  <Leader>ap           Calls `:AjaPopAjaPrompt`<CR> in normal mode.

Recommended mapping in Visual mode for your `~/.vimrc`:

  <C-v>                Calls `:AjaPopAjaAppendSelectionToPrompt`<CR>


vim:tw=78:ts=8:ft=help:norl:
